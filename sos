#!/usr/node/bin/node
/**
 * SmartOS Summary
 *
 * Give a summary of the current SmartOS machine.
 * Embedded in this script are a series of Nagios
 * style scripts as well that can be invoked directly.
 *
 * Author: Dave Eddy <dave@daveeddy.com>
 * Date: April 16, 2015
 * License: MIT
 */

var cp = require('child_process');
var fs = require('fs');
var os = require('os');
var util = require('util');

var VM = require('/usr/vm/node_modules/VM');
var assert = require('/usr/node/node_modules/assert-plus');
var getopt = require('/usr/node/node_modules/getopt');
var sprintf = require('/usr/node/node_modules/sprintf').sprintf;
var vasync = require('/usr/vm/node_modules/vasync');
var zone = require('/usr/node/node_modules/zonename');

// ansi coloring
var COLORS = {
    reset: 0,
    bold: 1,
    resetBold: 22,
    black: 30,
    red: 31,
    green: 32,
    yellow: 33,
    blue: 34,
    magenta: 35,
    cyan: 36,
    white: 37,
    grey: 90,
    brightBlack: 90,
    brightRed: 91,
    brightGreen: 92,
    brightYellow: 93,
    brightBlue: 94,
    brightMagenta: 95,
    brightCyan: 96,
    brightWhite: 97
};
Object.keys(COLORS).forEach(function (color) {
    COLORS[color] = '\x1b[' + COLORS[color] + 'm';
});

var mainColor = COLORS.blue;

// Strip ansi escape characters from a string
var _ANSI_REGEX = new RegExp([
    '[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[a-zA-Z\\d]*)*)?\\u0007)',
    '(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PRZcf-ntqry=><~]))'
].join('|'), 'g');

function stripAnsi(s) {
    assert.string(s, 's');

    return s.replace(_ANSI_REGEX, '');
}

// The SmartOS logo with all of its coloring and everything
var LOGO = [
    '\u001b[37m\u001b[1m*\u001b[31m--\u001b[0m\u001b[31m+--\u001b[37m\u001b[1m*\u001b[0m\u001b[33m--\u001b[37m\u001b[1m*\u001b[0m    ',
    '\u001b[31m|\u001b[1m\\\u001b[0m \u001b[31m|\u001b[0m\u001b[31m\\ |\u001b[33m\\ \u001b[1m|\\\u001b[0m   ',
    '\u001b[31m| \u001b[1m\\\u001b[0m\u001b[31m|\u001b[0m \u001b[31m\\| \u001b[33m\\\u001b[1m| \\\u001b[0m  ',
    '\u001b[31m+--\u001b[1m\u001b[37m*\u001b[31m--+\u001b[0m\u001b[33m--\u001b[1m\u001b[37m*\u001b[33m--\u001b[37m*\u001b[0m ',
    '\u001b[37m|\u001b[31m\\ |\\ |\\ \u001b[33m|\u001b[1m\\ |\u001b[0m ',
    '\u001b[37m| \u001b[31m\\| \\| \\\u001b[33m| \u001b[1m\\|\u001b[0m ',
    '\u001b[37m\u001b[1m*\u001b[0m\u001b[37m--+\u001b[31m--+\u001b[33m--+\u001b[1m--+\u001b[0m ',
    ' \u001b[37m\u001b[1m\\ |\u001b[0m\u001b[34m\\ |\\ |\u001b[1m\\ |\u001b[0m ',
    '  \u001b[37m\u001b[1m\\| \u001b[0m\u001b[34m\\| \\| \u001b[1m\\|\u001b[0m ',
    '   \u001b[37m\u001b[1m*--+\u001b[0m\u001b[34m--\u001b[37m\u001b[1m*\u001b[34m--\u001b[37m*\u001b[0m ',
    '\u001b[37m\u001b[1mJoyent SmartOS\u001b[0m',
];
var LOGO_WIDTH = stripAnsi(LOGO[0]).length;

// Ensure that each line of the logo is the same length
LOGO.forEach(function (line, i) {
    var len = stripAnsi(line).length;
    assert.equal(len, LOGO_WIDTH,
        sprintf('Logo line %d incorrect length: wanted %d found %d',
            i,
            LOGO_WIDTH,
            len));
});

// Usage message
var USAGE = [
    'Usage: sos [--color=auto|yes|no] [--full] [--help]',
    '',
    'SOS - SmartOS Summary',
    '  Gather and display information about a SmartOS installation',
    '',
    'Options',
    '  -c, --color=auto|no|yes  enable/disable color output, defaults to auto',
    '  -C, --main-color=blue    main color to use in output, defaults to blue',
    '  -f, --full               additional output',
    '  -h, --help               print this message and exit',
].join('\n');

// Disable color output
function disableColors() {
    Object.keys(COLORS).forEach(function (color) {
        COLORS[color] = '';
    });

    LOGO = LOGO.map(function (line) {
        return stripAnsi(line);
    });
}

// Printf convenience function
function printf() {
    process.stdout.write(sprintf.apply(this, arguments));
}

// Print part of the logo and some right-justified text
var _logoIndex = 0;
var _padLeftLogo = 4;
var _padRightLogo = 5;
function printLine() {
    var line = sprintf.apply(null, arguments);
    var logo = LOGO[_logoIndex];

    var s = '';
    var i;

    // Left pad the logo
    for (i = 0; i < _padLeftLogo; i++) {
        s += ' ';
    }

    // Put a line of the logo
    s += logo || new Array(LOGO_WIDTH + 1).join(' ');

    // Pad the right of the logo
    for (i = 0; i < _padRightLogo; i++) {
        s += ' ';
    }

    // Add the user supplied line
    s += line;

    console.log(s);

    _logoIndex++;
}

/*
 * Return a human readable timestamp given a number representing seconds
 * or a Date object.
 */
function human(seconds, suffix) {
    if (seconds instanceof Date) {
        seconds = Math.round((Date.now() - seconds) / 1000);
    }

    if (suffix === undefined) {
        suffix = seconds < 0 ? ' from now' : ' ago';
    }

    assert.number(seconds, 'seconds');
    assert.string(suffix, 'suffix');

    seconds = Math.abs(seconds);

    var times = [
        seconds / 60 / 60 / 24 / 365, // years
        seconds / 60 / 60 / 24 / 30,  // months
        seconds / 60 / 60 / 24,       // days
        seconds / 60 / 60,            // hours
        seconds / 60,                 // minutes
        seconds                       // seconds
    ];
    var names = ['year', 'month', 'day', 'hour', 'minute', 'second'];

    for (var i = 0; i < names.length; i++) {
        var time = Math.floor(times[i]);
        if (time > 1) {
            return util.format('%d %ss%s', time, names[i], suffix);
        } else if (time === 1) {
            return util.format('%d %s%s', time, names[i], suffix);
        }
    }
    return util.format('0 seconds%s', suffix);
}

/*
 * convert bytes to kb, mb, gb, etc.
 */
function prettybytes(bytes, num) {
    num = num || 1024;

    assert.number(bytes, 'bytes');
    assert.number(num, 'num');

    if (Math.floor(bytes / num / num / num / num)) {
        return util.format('%d TB', (bytes / num / num / num / num).toFixed(3));
    } else if (Math.floor(bytes / num / num / num)) {
        return util.format('%d GB', (bytes / num / num / num).toFixed(3));
    } else if (Math.floor(bytes / num / num)) {
        return util.format('%d MB', (bytes / num / num).toFixed(3));
    } else if (Math.floor(bytes / num)) {
        return util.format('%d KB', (bytes / num).toFixed(3));
    } else {
        return util.format('%d B', bytes);
    }
}

/*
 * parse output from `kstat -p ...`
 *
 * returns [{
 *   module: 'foo',
 *   instance: 'bar',
 *   name: 'baz',
 *   statistic: 'bat',
 *   value: '5', # not casted
 * }, ...]
 */
function parsekstat(output) {
    assert.string(output, 'output');

    return output.trim().split('\n').map(function (line) {
        var _s = line.trim().split(/[\t:]/);

        return {
            module: _s[0],
            instance: _s[1],
            name: _s[2],
            statistic: _s[3],
            value: _s[4]
        };
    });
}

/*
 * Convenience wrapper around cp.execFile
 *
 * example:
 * exec(['uname', '-v'], function (err, stdout, stderr) {
 * });
 */
function exec(args, cb) {
    assert.arrayOfString(args, 'args');
    assert.func(cb, 'cb');

    var cmd = args.shift();
    var opts = {
        encoding: 'utf8'
    };

    cp.execFile(cmd, args, opts, cb);
}

/*
 * bold and colorize output
 */
function boldAndColor(s) {
    assert.string(s, 's');

    return mainColor + COLORS.bold + s + COLORS.reset;
}

/*
 * safe hasOwnProperty
 */
function has(o, p) {
    return ({}).hasOwnProperty.call(o, p);
}

vasync.pipeline({arg: {}, funcs: [
    function parseCLIOpts(arg, cb) {
        arg.opts = {
            color: 'auto'
        };

        var options = [
            'c:(color)',
            'C:(main-color)',
            'h(help)',
            'f(full)',
        ].join('');

        var parser = new getopt.BasicParser(options, process.argv);
        var option;
        while ((option = parser.getopt()) !== undefined) {
            switch (option.option) {
            case 'c':
                arg.opts.color = option.optarg;
                break;
            case 'C':
                var c = option.optarg;
                if (!has(COLORS, c)) {
                    console.error('color "%s" not found, choices are %s',
                        c, Object.keys(COLORS));
                    process.exit(1);
                }
                mainColor = COLORS[c];
                break;
            case 'h':
                console.log(USAGE);
                process.exit(0);
            case 'f':
                arg.opts.full = true;
                break;
            default:
                console.error(USAGE);
                process.exit(1);
            }
        }

        switch (arg.opts.color) {
            case 'yes':
                // nothing to do
                break;
            case 'no':
                disableColors();
                break;
            case 'auto':
                if (!process.stdout.isTTY) {
                    disableColors();
                }
                break;
            default:
                console.error('unknown option for -c: "%s"', arg.opts.color);
                process.exit(1);
        }

        cb();
    },

    function getZonename(arg, cb) {
        arg.zonename = zone.getzonename();
        cb();
    },

    function getUname(arg, cb) {
        exec(['uname', '-v'], function (err, stdout) {
            if (err) {
                cb(err);
                return;
            }

            arg.uname = stdout.trim();
            cb();
        });
    },

    function getZpoolUsage(arg, cb) {
        exec(['zpool', 'list', '-Ho', 'name,cap'],
            function (err, stdout) {

            if (err && arg.zonename !== 'global') {
                // this is ok
                cb();
                return;
            }

            if (err) {
                cb(err);
                return;
            }

            var pools = {};
            stdout.trim().split('\n').forEach(function (line) {
                var _s = line.split('\t');
                var name = _s[0];
                var perc = _s[1];
                var num = parseInt(perc, 10);
                pools[name] = num;
            });

            arg.zpoolUsage = pools;
            cb();
        });
    },

    function getZpoolStatus(arg, cb) {
        var o = {};
        arg.zpoolStatus = o;

        exec(['zpool', 'status', '-x'], function (err, stdout, stderr) {
            var trimmed = stdout && stdout.trim();
            if (!err && !stderr) {
                if (trimmed === 'all pools are healthy' ||
                    (arg.zonename !== 'global' &&
                    trimmed === 'no pools available')) {

                    o.message = trimmed;
                    o.status = 'ok';
                    cb();
                    return;
                }
            }

            o.status = 'critical';
            o.message = 'run `zpool status -xv`';
            cb();
        });
    },

    function getMemory(arg, cb) {
        exec(['kstat', '-pc', 'zone_memory_cap', ':::rss', ':::physcap'],
            function (err, stdout, stderr) {

            if (err) {
                cb(err);
                return;
            }

            var rss = 0;
            var max = 0;

            parsekstat(stdout).forEach(function (o) {
                switch (o.statistic) {
                case 'rss': rss += parseInt(o.value, 10); break;
                case 'physcap': max += parseInt(o.value, 10); break;
                }
            });
            if (arg.zonename === 'global') {
                max = os.totalmem();
            }

            var percentage = ((rss * 100) / max);
            arg.memory = {
                rss: rss,
                max: max,
                percentage: percentage
            };
            cb();
        });
    },

    function getProduct(arg, cb) {
        fs.readFile('/etc/product', {encoding: 'utf8'}, function (err, body) {
            if (err) {
                // ignore this
                cb();
                return;
            }

            var data = {};

            body.trim().split('\n').forEach(function (line) {
                var m = line.match(/^([^:]+): (.*)$/);
                if (!m) {
                    return;
                }
                var key = m[1];
                var value = m[2];
                data[key] = value;
            });

            arg.product = data;
            cb();
        });
    },

    function getPkgin(arg, cb) {
        var m;

        fs.readFile('/opt/local/etc/pkgin/repositories.conf',
            {encoding: 'utf8'}, function (err, body) {

            // ignore error
            body = body || '';

            var url = body.trim().split('\n').filter(function (line) {
                return line && line[0] !== '#';
            })[0];
            var repo;

            if (url) {
                m = url.match(/\/([0-9]{4}Q[1-4])\//);
                if (m) {
                    repo = m[1];
                }
            }

            exec(['pkgin', 'stats'], function (err, stdout) {
                // ignore error here
                stdout = stdout || '';
                var installedPackages;
                var diskSpaceOccupied;

                try {
                    installedPackages = parseInt(
                        stdout.match(/Installed packages: ([0-9]+)/)[1], 10);
                } catch (e) {}

                try {
                    diskSpaceOccupied =
                        stdout.match(/Disk space occupied: (.*)/)[1];
                } catch (e) {}

                // break here if all of this failed
                if (repo === undefined &&
                    installedPackages === undefined &&
                    diskSpaceOccupied === undefined) {

                    cb();
                    return;
                }

                var output = [];
                if (installedPackages) {
                    output.push(sprintf('%d installed', installedPackages));
                }
                if (diskSpaceOccupied) {
                    output.push(sprintf('(%s)', diskSpaceOccupied));
                }
                if (repo) {
                    output.push(sprintf('pkgin %s', repo));
                } else {
                    output.push('pkgin');
                }

                arg.pkgin = output.join(' ');

                cb();
            });
        });
    },

    function getSvcs(arg, cb) {
        exec(['svcs', '-Ho', 'state'], function (err, stdout, stderr) {
            if (err || stderr) {
                arg.svcs = sprintf('svcs: %s', err ? err.message : stderr);
                cb();
                return;
            }

            var states = {};
            stdout.trim().split('\n').forEach(function (state) {
                states[state] = states[state] || 0;
                states[state]++;
            });

            arg.svcs = sprintf('%d services online', states.online);
            if (states.maintenance) {
                arg.svcs += sprintf(' (%d in maintenance)', states.maintenance);
            }

            cb();
        });
    },

    function getVmadm(arg, cb) {
        if (arg.zonename !== 'global') {
            cb();
            return;
        }

        var fields = [
            'alias',
            'boot_timestamp',
            'brand',
            'max_physical_memory',
            'nics',
            'quota',
            'state',
        ];
        VM.lookup({}, {fields: fields}, function (err, vms) {
            if (err) {
                cb(err);
                return;
            }

            vms.sort(function (a, b) {
                // sort by brand, then state, then ram, then alias
                var props = ['brand', 'state', 'max_physical_memory', 'alias'];
                for (var i = 0; i < props.length; i++) {
                    var prop = props[i];
                    if (a[prop] > b[prop])
                        return 1;
                    if (a[prop] < b[prop])
                        return -1;
                }
                return 0;
            });

            arg.vms = vms;
            cb();
        });
    },

    function summarize(arg, cb) {
        console.log();

        // Username and Hostname
        var user = process.env.USER;
        var host = os.hostname();
        var s = '';

        if (user) {
            s += COLORS.bold + mainColor + user + COLORS.reset;
            s += COLORS.bold + '@' + COLORS.reset;
        }
        s += COLORS.bold + mainColor + host + COLORS.reset;

        printLine(s);

        // -------------- separator
        var len = stripAnsi(s).length;
        printLine(new Array(len + 1).join('-'));

        // Generic Key-Value
        var o = {};

        // OS
        o.OS = sprintf('Joyent SmartOS (%s)', os.type());

        // Uname -v
        var platform = arg.uname.split('_')[1];
        s = platform.replace(/^(\d{4})(\d{2})(\d{2})T(\d{2})(\d{2})(\d{2})Z$/,
            '$1-$2-$3T$4:$5:$6.000Z');
        var date = new Date(s);
        assert(isFinite(date), 'invalid date');
        o.Kernel = sprintf('%s (%s)', platform, human(date, ' old'));

        // Zonename
        o.Zonename = arg.zonename;

        // Uptime
        var uptime = os.uptime();
        var daysUp = Math.floor(uptime / 60 / 60 / 24);
        o.Uptime = human(uptime, '');
        if (daysUp > 31) {
            o.Uptime += sprintf(' (%d days)', daysUp);
        }

        // Memory
        o.Memory = sprintf('%s / %s (%d%)',
            prettybytes(arg.memory.rss),
            prettybytes(arg.memory.max),
            arg.memory.percentage.toFixed(2));

        // CPUs
        o.CPU = [];
        var cpus = {};
        os.cpus().forEach(function (cpu) {
            var name = sprintf('%s (%d MHz)',
                cpu.model.replace(/\s+/g, ' '),
                cpu.speed);
            cpus[name] = cpus[name] || 0;
            cpus[name]++;
        });

        Object.keys(cpus).forEach(function (model) {
            o.CPU.push(sprintf('%d x %s', cpus[model], model));
        });

        // SMF
        o.SMF = arg.svcs;

        // Product
        if (arg.product && arg.product.Image) {
            o.Image = arg.product.Image;
        }

        if (arg.pkgin) {
            o.Packages = arg.pkgin;
        }

        // VMs
        if (arg.vms) {
            var running = arg.vms.filter(function (vm) {
                return vm.state === 'running';
            });
            o.VMs = sprintf('%d running (%d total)',
                running.length,
                arg.vms.length);
        }

        // ZFS
        if (arg.zpoolUsage) {
            var pools = [];
            Object.keys(arg.zpoolUsage).forEach(function (zpool) {
                var usage = arg.zpoolUsage[zpool];
                pools.push(sprintf('%s %d%', zpool, usage));
            });
            o['Zpool Usage'] = pools.join(', ');
        }

        // Print the data
        Object.keys(o).forEach(function (key) {
            var values = o[key];

            if (!Array.isArray(values)) {
                values = [values];
            }

            values.forEach(function (value) {
                var s = boldAndColor(key + ': ') + o[key];
                printLine(s);
            });
        });

        // ensure that the full logo has been printed
        while (_logoIndex < LOGO.length) {
            printLine('');
        }

        console.log();

        // we are done here if -f is not specified
        if (!arg.opts.full) {
            process.exit(0);
            return;
        }

        cb();
    },

    function getDeviceErrors(arg, cb) {
        exec(['kstat', '-pc', 'device_error'],
            function (err, stdout, stderr) {

            if (err) {
                cb(err);
                return;
            }

            if (stderr) {
                cb(new Error(stderr.trim()));
                return;
            }

            var devices = {};
            parsekstat(stdout).forEach(function (o) {
                var device = o.name.split(',')[0];

                // store the info
                devices[device] = devices[device] || {};
                devices[device][o.statistic] = o.value;
            });

            arg.devices = devices;
            cb();
        });
    },

    function fullSummary(arg, cb) {
        var keys;

        // interfaces
        var interfaces = os.networkInterfaces();
        keys = Object.keys(interfaces);
        console.log('%s %d', boldAndColor('Interfaces:'),
            keys.length);
        keys.forEach(function (_int) {
            var a = interfaces[_int].map(function (o) {
                return o.address;
            });

            printf('  %s %-8s %s\n',
                boldAndColor('-'),
                _int,
                a.join(', '));
        });
        console.log();

        // devices (disks)
        keys = Object.keys(arg.devices);
        console.log('%s %d', boldAndColor('Devices:'),
            keys.length);
        keys.forEach(function (device) {
            var o = arg.devices[device];
            var size = parseInt(o.Size, 10);
            if (isNaN(size)) {
                size = -1;
            }
            printf('  %s %-8s %-5s %-20s %-17s %-10s (%s)\n',
                boldAndColor('-'),
                device,
                o.Vendor || '-',
                o.Product || '-',
                o['Serial No'] || '-',
                prettybytes(size, 1000),
                prettybytes(size));
        });
        console.log();

        // VMs
        if (arg.vms) {
            var running = 0;
            var total = 0;
            arg.vms.forEach(function (vm) {
                if (vm.state === 'running') {
                    running++;
                }
                total++;
            });
            console.log('%s %d running (%d total)',
                boldAndColor('VMs:'), running, total);

            arg.vms.forEach(function (vm) {
                var started = new Date(vm.boot_timestamp);

                printf('  %s %-8s %-17s %-7s %6d MB %5d GB %12s',
                    boldAndColor('-'),
                    vm.brand,
                    vm.alias,
                    vm.state,
                    vm.max_physical_memory,
                    vm.quota,
                    vm.nics.map(function (nic) { return nic.ip; }).join(','));

                if (started instanceof Date && isFinite(started)) {
                    printf('   (up %s)', human(started, ''));
                }

                console.log();
            });
            console.log();
        }

        // Hard Errors
        var harderrors = [];
        Object.keys(arg.devices).forEach(function (device) {
            var o = arg.devices[device];
            var he = parseInt(o['Hard Errors'], 10);
            if (he > 0) {
                harderrors.push(device);
            }
        });
        console.log(boldAndColor('Hard Errors:'));
        if (harderrors.length > 0) {
            console.log(' - critical: hard errors found on devices - %s',
                harderrors.join(', '));
        } else {
            console.log(' - ok: no hard errors found');
        }

        // Zpool Status
        console.log();
        console.log(boldAndColor('Zpool Status:'));
        console.log(' - %s: %s',
            arg.zpoolStatus.status,
            arg.zpoolStatus.message);

        cb();
    }
]}, function (err) {
    if (err) {
        console.error(err.message);
        process.exit(1);
    }

    process.exit(0);
});
